// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())

  cards     Card[]
  decks     Deck[]
  reviews   CardReview[]

  avatarUrl String?   // ✅ 프로필 이미지 (URL)
  bio       String?   // ✅ 자기소개

  passwordResetTokens PasswordResetToken[]
}

model Card {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  answer        String
  image         String?       // 이미지 경로
  type          String?       // 카드 유형 (예: '단어', '정의' 등)
  tier          Int?          // 학습 수준 분류
  box           Int?          @default(1) // Leitner box 번호
  superCardId   Int?          // 상위 카드 ID (관계형 구조)
  class         String?       // 카테고리 또는 분류
  reviewCount   Int           @default(0) // 누적 복습 횟수

  intervalDays  Int           @default(1)
  easeFactor    Float         @default(2.5)
  lastReviewAt  DateTime
  nextReviewAt  DateTime     
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  userId        Int

  deck          Deck?         @relation(fields: [deckId], references: [id])
  deckId        Int?

  reviews       CardReview[]
}

model Deck {
  id     Int     @id @default(autoincrement())
  name   String
  
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  cards     Card[]
}

model CardReview {
  id        Int      @id @default(autoincrement())
  reviewedAt DateTime @default(now())
  success   Boolean   
  note      String?   

  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  card      Card      @relation(fields: [cardId], references: [id])
  cardId    Int
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}